{ lib, config, ... }:
let
  inherit (builtins) typeOf;

  inherit (lib) mkOption types;
  inherit (types) listOf submodule nullOr either;

  ron = import ./ron.nix { inherit lib; };
  inherit (ron) toQuotedString;

  actions = import ./actions.nix { inherit lib; };

  # define the key for a keybind
  defineBinding = binding:
    ron.struct {
      inherit (binding) modifiers;
      key = if isNull binding.key then null else toQuotedString binding.key;
    };

  # map keybinding from list of attrset to hashmap of (mod,key): action
  _mapBindings = bindings:
    map (inner: { "${defineBinding inner}" = actions.toString inner; })
    bindings;
  mapBindings = bindings: ron.assoc (_mapBindings bindings);

  cfg = config.programs.cosmic.input;
in {
  options.programs.cosmic.input = mkOption {
    default = { };
    description = ''
      Cosmic Input options
    '';
    type = submodule {
      options = {

        asDefaults = lib.mkOption {
          default = false;
          type = lib.types.bool;
          description = ''
            Whether to use these bindings as the defaults,
            preventing cosmic-settings from overriding them.
          '';
        };

        binds = lib.mkOption {
          default = [ ];
          description = ''
            A set of keybindings and actions for COSMIC DE.

            There are utility functions available in `config.lib.cosmic.Actions`
            and `config.lib.cosmic.mapBinds`.

            Some actions require a value.
          '';
          example = lib.literalExpression ''
            let inherit (config.lib.cosmic) Actions mapBinds;
            in mapBinds {
              Super.h = Actions.Focus "Left";
              Super.Shift.h = Actions.Move "Left";
              Super.Space = Actions.ToggleTiling;
              Super.Shift.q.action = "Close";
              Super.a = Actions.Spawn (pkgs.writeShellScriptBin "my-script" "");
              Super."1" = Actions.Workspace 1;
              Super.Shift."1" = Actions.MoveToWorkspace "1";
              Super."o" = Actions.System "HomeFolder";
            }
          '';
          type = types.listOf (types.submodule {
            options = {
              modifiers = mkOption {
                description = ''
                  List of modifier keys for this bind

                  Note: If this list is empty, the key alone will trigger the action.
                '';
                type = types.listOf actions.Modifier;
              };
              key = mkOption {
                description = ''
                  The key which will trigger the action, when the modifiers are held.
                '';
                type = types.str;
              };
              action = mkOption {
                description = ''
                  The action which the keys will trigger
                '';
                type = types.enum (builtins.attrNames actions.Actions);
              };
              value = mkOption {
                description = ''
                  The value passed to the action. For example:

                  - The "Spawn" action will take a command as a string or a package.
                  - The "System" action will take one of a defined list of system actions.

                  To find the arguments for an action, check the file generated by
                  cosmic-settings, or reference the source:
                  https://github.com/pop-os/cosmic-settings-daemon/blob/master/config/src/shortcuts/action.rs
                '';
                default = null;
                type =
                  types.nullOr (types.oneOf [ types.int types.str types.path ]);
              };
            };
          });
        };
      };
    };
  };

  config = {
    lib.cosmic = actions;
    programs.cosmic.settings = {
      "com.system76.CosmicSettings.Shortcuts".options =
        (if cfg.binds == [ ] then
          { }
        else {
          ${if cfg.asDefaults then "defaults" else "custom"} =
            mapBindings (cfg.binds);
        });
    };
  };

}
